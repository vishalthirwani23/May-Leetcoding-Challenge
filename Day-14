https://leetcode.com/explore/featured/card/may-leetcoding-challenge/535/week-2-may-8th-may-14th/3329/
Code:

class Trie {
public:
    /** Initialize your data structure here. */
    class TrieNode{
    public:
    unordered_map<char,TrieNode *> m;
        bool endofword=false;
        
        
};
    TrieNode *root =new TrieNode();
    Trie() {
        
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        TrieNode *temp=root;
        for(int i=0;i<word.length();i++){
            if(!(temp->m[word[i]]))
                temp->m[word[i]]=new TrieNode();
            temp=temp->m[word[i]];
        }
        temp->endofword=true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
         TrieNode *temp=root;
        for(int i=0;i<word.length();i++){
            if(!(temp->m[word[i]]))
           return false;
            temp=temp->m[word[i]];
        }
        return temp->endofword;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        TrieNode *temp=root;
        for(int i=0;i<prefix.length();i++){
            if(!(temp->m[prefix[i]]))
                return false;
            temp=temp->m[prefix[i]];
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
